# Этап 1: Сборка приложения (Builder)
# Используем официальный образ Go на базе Alpine для сборки. Он содержит все необходимые инструменты.
FROM golang:1.24-alpine AS builder

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем файлы go.mod и go.sum для кеширования зависимостей.
# Docker будет повторно использовать этот слой, если зависимости не изменились.
COPY go.mod go.sum ./
RUN go mod download

# Копируем весь остальной исходный код проекта
COPY . .

# Собираем приложение для Linux.
# CGO_ENABLED=0 создает статически скомпилированный бинарный файл.
# -ldflags="-w -s" уменьшает размер бинарного файла, удаляя отладочную информацию.
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o scheduler ./cmd/main.go

# Этап 2: Финальный образ (Final)
# Используем минимальный образ Alpine. Он очень легкий.
FROM alpine:latest

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем только скомпилированный бинарный файл из этапа 'builder'
COPY --from=builder /app/scheduler .

# Копируем директорию с файлами фронтенда
COPY web ./web

# Сообщаем Docker, что контейнер будет слушать порт 7540
EXPOSE 7540

# Команда, которая будет выполняться при запуске контейнера
CMD ["./scheduler"]